# 📘 Meine Lernübersicht

## JavaScript

- `setAttribute()` – setzt ein Attribut auf ein Element (z. B. `aria-label`)
- Ternary Operator (`? :`) – Kurzform für if/else  
  Beispiel: `let x = (a > b) ? 'mehr' : 'weniger';`
- `?.` Optional Chaining – prüft, ob eine Eigenschaft existiert, bevor darauf zugegriffen wird
- String Interpolation mit Backticks – `${variable}` in `` `Text ${variable}` ``
- DOM-Methoden: `querySelector`, `getElementById`, `addEventListener` (noch vertiefen)
- Funktionen schreiben und aufrufen
- Arrays und Objekte (Zugriff, Methoden wie `.map()`, `.filter()` usw.)

FILTER()
### 🔍 `filter()` in JavaScript

Die `filter()`-Methode erstellt ein **neues Array**, das nur die Elemente enthält, die eine bestimmte Bedingung erfüllen.

#### ✅ Syntax:
```js
const result = array.filter(callback);

const numbers = [1, 2, 3, 4, 5];
const even = numbers.filter(n => n % 2 === 0);
console.log(even); // ➜ [2, 4]

createElement()

### 🧱 `document.createElement()`

Die Methode `createElement()` wird verwendet, um **ein neues HTML-Element im JavaScript** zu erstellen – es ist noch nicht im DOM, bis du es explizit hinzufügst.

#### ✅ Syntax:
```js
const element = document.createElement('tagName');

const newDiv = document.createElement('div');
newDiv.textContent = 'Hallo Welt!';
document.body.appendChild(newDiv);

createTextNode()
The createTextNode() method is used to create a text node. To use it, you call it and pass in the text as a string:

document.createTextNode("your text")
const myText = document.createTextNode("your text")

const parentElement = document.createElement("button")
const parentElementText = document.createTextNode("Click me")

getDate() → Tag (1–31)

getMonth() → Monat (0–11) → muss +1 gerechnet oder als Monatsname übersetzt werden

getFullYear() → Jahr

Optional:

getDay() → Wochentag (0–6)

toLocaleDateString() → für einfache Formatierung

const currentDate = new Date();
console.log(currentDate);

// Output:
// Mon Aug 23 2021 15:31:00 GMT-0400 (Eastern Daylight Time)

---

## HTML & CSS

- HTML-Grundstruktur
- Listen (`<ul>`, `<li>`)
- Klassen und IDs
- CSS-Box-Modell (margin, padding, border)
- Farben, Abstände, Schriftgrößen
- CSS-Variablen
- Flexbox
- Media Queries (Grundlagen)

---

## Git & GitHub

- Repositories erstellen, strukturieren (z. B. `lernen/`, `webseite-kunde/`)
- Markdown-Dateien (`README.md`, eigene Notizen)
- Dateien & Ordner verschieben und versionieren
- GitHub als Speicherort für Lernprojekte nutzen

---

## Markdown

- Überschriften: `#`, `##`, `###` …
- Listen: `-`, `*`
- Codeblöcke: ```javascript ``` oder `inline`
- Links: `[Text](URL)`
- Fett: `**Text**`, Kursiv: `_Text_`

---

## 📝 To-Do / Nächste Schritte

- Eigene kleine Projekte starten
- CSS-Übung mit komplexeren Layouts
- JS: Event Handling, DOM-Änderungen
- Git: Branches & Commits besser verstehen
- Cheatsheets für JS & CSS anlegen
