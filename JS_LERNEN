# üìò Meine Lern√ºbersicht

## JavaScript

- `setAttribute()` ‚Äì setzt ein Attribut auf ein Element (z.‚ÄØB. `aria-label`)
- Ternary Operator (`? :`) ‚Äì Kurzform f√ºr if/else  
  Beispiel: `let x = (a > b) ? 'mehr' : 'weniger';`
- `?.` Optional Chaining ‚Äì pr√ºft, ob eine Eigenschaft existiert, bevor darauf zugegriffen wird
- String Interpolation mit Backticks ‚Äì `${variable}` in `` `Text ${variable}` ``
- DOM-Methoden: `querySelector`, `getElementById`, `addEventListener` (noch vertiefen)
- Funktionen schreiben und aufrufen
- Arrays und Objekte (Zugriff, Methoden wie `.map()`, `.filter()` usw.)

---

## HTML & CSS

- HTML-Grundstruktur
- Listen (`<ul>`, `<li>`)
- Klassen und IDs
- CSS-Box-Modell (margin, padding, border)
- Farben, Abst√§nde, Schriftgr√∂√üen
- CSS-Variablen
- Flexbox
- Media Queries (Grundlagen)

---

## Git & GitHub

- Repositories erstellen, strukturieren (z.‚ÄØB. `lernen/`, `webseite-kunde/`)
- Markdown-Dateien (`README.md`, eigene Notizen)
- Dateien & Ordner verschieben und versionieren
- GitHub als Speicherort f√ºr Lernprojekte nutzen

---

## Markdown

- √úberschriften: `#`, `##`, `###` ‚Ä¶
- Listen: `-`, `*`
- Codebl√∂cke: ```javascript ``` oder `inline`
- Links: `[Text](URL)`
- Fett: `**Text**`, Kursiv: `_Text_`

---

## üìù To-Do / N√§chste Schritte

- Eigene kleine Projekte starten
- CSS-√úbung mit komplexeren Layouts
- JS: Event Handling, DOM-√Ñnderungen
- Git: Branches & Commits besser verstehen
- Cheatsheets f√ºr JS & CSS anlegen
